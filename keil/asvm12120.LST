C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 1   


C51 COMPILER V8.01, COMPILATION OF MODULE ASVM12120
OBJECT MODULE PLACED IN asvm12120.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE asvm12120.c OPTIMIZE(6,SPEED) BROWSE INCDIR(C:\Cypress\USB\Target\Inc) DEBU
                    -G OBJECTEXTEND CODE

line level    source

   1          #pragma NOIV                    // Do not generate interrupt vectors
   2          //-----------------------------------------------------------------------------
   3          //   File:      gpiftool.c
   4          //   Contents:  Hooks required to implement USB peripheral function.
   5          //              Code written for EZUSB FX2 128-pin REVE...
   6          //              Firmware tested on EZUSB FX2 128-pin (CY3681 DK)
   7          //   Copyright (c) 2001 Cypress Semiconductor All rights reserved
   8          //-----------------------------------------------------------------------------
   9          #include "fx2.h"
  10          #include "fx2regs.h"
  11          #include "fx2sdly.h"            // SYNCDELAY macro
  12          
  13          #define setb(port,bit) port|=(1<<bit)
  14          #define clrb(port,bit) port&=~(1<<bit)
  15          #define tstb(port,bit) (port & (1<<bit))
  16          
  17          
  18          extern BOOL GotSUD;             // Received setup data flag
  19          extern BOOL Sleep;
  20          extern BOOL Rwuen;
  21          extern BOOL Selfpwr;
  22          
  23          // ------------------------------------------------------------------
  24          // ------------переменные, функции и описания добавлены мной-----------------------------
  25          #define nCONFIG   2  // pe2
  26          #define nSTATUS   4  // pe4
  27          #define DATA0     0  // pe0
  28          #define DCLK      1  // pe1
  29          #define CONF_DONE 3  // pe3
  30          #define s_data 5  // pe5
  31          #define s_clk 6  // pe6
  32          #define s_load 7  // pe7
  33          #define sdio9517 1
  34          #define sclk9517 4
  35          #define cs9517 3
  36          
  37          
  38          void knock(void){
  39   1      BYTE i;
  40   1         clrb(IOE,DCLK); setb(IOE,DCLK);
  41   1         SYNCDELAY; 
  42   1          clrb(IOE,DCLK);
  43   1         SYNCDELAY;
  44   1      }
*** WARNING C280 IN LINE 39 OF ASVM12120.C: 'i': unreferenced local variable
  45           
  46          void ShiftOneByte( BYTE b){
  47   1      BYTE i;
  48   1         // выдвинуть один байт 
  49   1         for(i=0;i<8;i++){
  50   2            if(tstb(b,i)) setb(IOE,DATA0);else clrb(IOE,DATA0); 
  51   2            knock();      
  52   2         }
  53   1      }
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 2   

  54          // -----------------------------------------
  55          
  56          
  57          void LoadByteCondition(void){
  58   1              setb(IOE,s_load);SYNCDELAY;
  59   1          setb(IOE,s_clk);SYNCDELAY;
  60   1              clrb(IOE,s_load);SYNCDELAY;
  61   1              clrb(IOE,s_clk);SYNCDELAY;
  62   1      }
  63          void StartCondition(void){
  64   1          setb(IOE,s_clk);SYNCDELAY;
  65   1              setb(IOE,s_load);SYNCDELAY;
  66   1              clrb(IOE,s_clk);SYNCDELAY;
  67   1              clrb(IOE,s_load);SYNCDELAY;
  68   1      }
  69          
  70          void ShiftByte( BYTE b){
  71   1      BYTE i;
  72   1            for(i=0;i<8;i++){
  73   2               if(tstb(b,i)) setb(IOE,s_data);
  74   2                       else clrb(IOE,s_data); 
  75   2               setb(IOE,s_clk);SYNCDELAY;
  76   2                       clrb(IOE,s_clk);SYNCDELAY;
  77   2            }
  78   1      }
  79          void ShiftByteStart( BYTE b){
  80   1      BYTE i;
  81   1            for(i=0;i<7;i++){
  82   2               if(tstb(b,i)) setb(IOE,s_data);
  83   2                       else clrb(IOE,s_data); 
  84   2               setb(IOE,s_clk);SYNCDELAY;
  85   2                       clrb(IOE,s_clk);SYNCDELAY;
  86   2            }
  87   1            if(tstb(b,7)) setb(IOE,s_data);
  88   1            else clrb(IOE,s_data); 
  89   1                StartCondition();
  90   1      }
  91          
  92          //-------------------------------------------------------------------
  93          
  94          void Shift9517(BYTE b){
  95   1      BYTE i;
  96   1          for(i=0x80;i;i>>=1){
  97   2            if(b & i)  setb(IOC,sdio9517);else clrb(IOC,sdio9517);
  98   2                SYNCDELAY;
  99   2            clrb(IOC,sclk9517);SYNCDELAY;setb(IOC,sclk9517);
 100   2              }
 101   1      
 102   1      }
 103          //-------------------------------------------------------------------
 104          
 105          
 106          BYTE Configuration;             // Current configuration
 107          BYTE AlternateSetting;          // Alternate settings
 108          
 109          
 110          // 512 for high speed, 64 for full speed
 111          static WORD enum_pkt_size = 0x0000;
 112          static WORD paket = 0x0000;
 113          static BYTE start = FALSE;
 114          //-----------------------------------------------------------------------------
 115          // Task Dispatcher hooks
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 3   

 116          //   The following hooks are called by the task dispatcher.
 117          //-----------------------------------------------------------------------------
 118          void TD_Init( void ){  // Called once at startup
 119   1      BYTE b;
 120   1                                                                                                                         
 121   1        CPUCS = 0x10;  //  for 48MHz operation CLKOE=0, don't drive CLKOUT
 122   1      //  SYNCDELAY; IFCONFIG = 0xe3; // 48МГц, drive, синхронный, slave fifo
 123   1      //  SYNCDELAY; IFCONFIG = 0x03+0x80+0x20; // 30МГц, drive, синхронный, slave fifo
 124   1        SYNCDELAY; IFCONFIG = 0x03+0x80+0x20+0x40; // 48МГц, drive, синхронный, slave fifo
 125   1      //  SYNCDELAY; IFCONFIG = 0xeB; // 48МГц, drive, асинхронный, slave fifo
 126   1      
 127   1        SYNCDELAY;  EP2CFG = 0xA2;   
 128   1        SYNCDELAY;  EP6CFG = 0xE2;   
 129   1        SYNCDELAY;  EP8CFG = 0xE2;   
 130   1      
 131   1        // EP4 are not used in this implementation...
 132   1        SYNCDELAY;   EP4CFG = 0x20;                // clear valid bit
 133   1      //  SYNCDELAY;   EP8CFG = 0x60;                // clear valid bit
 134   1      
 135   1        SYNCDELAY;  FIFORESET = 0x80;             // activate NAK-ALL to avoid race conditions
 136   1        SYNCDELAY;  FIFORESET = 0x02;             // reset, FIFO 2
 137   1        SYNCDELAY;  FIFORESET = 0x04;             // reset, FIFO 4
 138   1        SYNCDELAY;  FIFORESET = 0x06;             // reset, FIFO 6
 139   1        SYNCDELAY;  FIFORESET = 0x08;             // reset, FIFO 8
 140   1        SYNCDELAY;  FIFORESET = 0x00;             // deactivate NAK-ALL
 141   1      
 142   1        // 16-bit bus (WORDWIDE=1)...
 143   1        SYNCDELAY;    EP2FIFOCFG = 0x01;
 144   1        SYNCDELAY;    EP6FIFOCFG = 0x01;  // no autoin 16 bit                    
 145   1      //  SYNCDELAY;    EP6FIFOCFG = 0x01+0x08;  //  autoin
 146   1      
 147   1        SYNCDELAY; PINFLAGSAB=0x0e; // назначен flaga на случай полного fifo 6
 148   1      
 149   1        // OUT endp's come up "unarmed" in the cpu domain
 150   1        // ...to "arm" the endp's when AUTOOUT=0 the cpu write's xBCL w/skip=1 (N times)
 151   1        SYNCDELAY;  EP2BCL = 0x80;                // arm first buffer
 152   1        SYNCDELAY;  EP2BCL = 0x80;                // arm second buffer
 153   1        SYNCDELAY;  EP2BCL = 0x80;                // arm third buffer
 154   1        SYNCDELAY;  EP2BCL = 0x80;                // arm fourth buffer
 155   1      
 156   1        // IN endp's come up in the cpu/peripheral domain
 157   1      
 158   1        // setup INT4 as internal source for GPIF interrupts
 159   1        // using INT4CLR (SFR), automatically enabled
 160   1        INTSETUP |= 0x03;   // Enable INT4 FIFO/GPIF Autovectoring
 161   1        SYNCDELAY;          // used here as "delay"
 162   1              EXIF &=  ~0x40;     // just in case one was pending...
 163   1        SYNCDELAY;          // used here as "delay"
 164   1        GPIFIRQ = 0x02;
 165   1        SYNCDELAY;   GPIFIE = 0x02;      // Enable GPIFWF interrupt
 166   1        SYNCDELAY;   EIE |= 0x04;        // Enable INT4 ISR, EIE.2(EIEX4=1)
 167   1      
 168   1        // порт Е предназначен для общения с альтерой
 169   1         setb(OEE,DATA0);
 170   1         clrb(IOE,DCLK);   setb(OEE,DCLK);
 171   1         setb(IOE,nCONFIG);setb(OEE,nCONFIG);
 172   1         clrb(IOE,s_data);setb(OEE,s_data);
 173   1         clrb(IOE,s_clk);setb(OEE,s_clk);
 174   1         clrb(IOE,s_load);setb(OEE,s_load);
 175   1      
 176   1      // порт С - программирование AD9517
 177   1         IOC=0x1f;
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 4   

 178   1         OEC=0x1f;
 179   1      
 180   1      
 181   1      }
*** WARNING C280 IN LINE 119 OF ASVM12120.C: 'b': unreferenced local variable
 182          
 183          #define GPIFTRIGWR 0
 184          #define GPIFTRIGRD 4
 185          
 186          #define GPIF_EP2 0
 187          #define GPIF_EP4 1
 188          #define GPIF_EP6 2
 189          #define GPIF_EP8 3
 190          
 191          
 192          
 193          void TD_Poll( void )   {
 194   1         BYTE b,Num,kol,k;
 195   1      WORD num,i;
 196   1        // Handle OUT data...   // is the host sending data...
 197   1        if( !( EP2468STAT & 0x01 ) )  {
 198   2          // EP2EF=0, when endp buffer "not" empty
 199   2          b=EP2FIFOBUF[0];
 200   2              SYNCDELAY;  FIFORESET = 0x80;   // activate NAK-ALL to avoid race conditions
 201   2      
 202   2          switch (b){
 203   3          case 0x80:
 204   3               // процедура входа в режим конфигурации
 205   3                 SYNCDELAY;EP6FIFOCFG = 0x01;  //  noautoin
 206   3                 SYNCDELAY;FIFORESET=6; SYNCDELAY;FIFORESET=0;
 207   3               // запуск конфигурации импульсом nCONFIG
 208   3                  clrb(IOE,nCONFIG); EZUSB_Delay(1);setb(IOE,nCONFIG);EZUSB_Delay(1);
 209   3          break;
 210   3      
 211   3          case 0x81:
 212   3               // очередная порция конфигурационных данных
 213   3               // передается хостом порциями не более 512-3 байт. Первые 2 байта после команды - длина
 214   3               num=EP2FIFOBUF[1]+EP2FIFOBUF[2]*256;
 215   3      
 216   3               for(i=3;i<num+3;i++){
 217   4                  ShiftOneByte(EP2FIFOBUF[i]);
 218   4               }
 219   3      
 220   3          break;
 221   3      
 222   3          case 0x82:
 223   3               // процедура выхода из режима конфигурации
 224   3               for(i=0;i<100;i++) knock();
 225   3      //         LoadControlWord(0x80,0x00);
 226   3               EZUSB_Delay(1);
 227   3          break;
 228   3      
 229   3          case 0x83:
 230   3               // чтение статуса порта Е
 231   3               EP6FIFOBUF[0]=IOE;
 232   3               SYNCDELAY; EP6BCH=1; SYNCDELAY; EP6BCL=0;         
 233   3          break;
 234   3      
 235   3          case 0x84:
 236   3               // переключение режима fifo6
 237   3               SYNCDELAY;FIFORESET=6;
 238   3               if (EP2FIFOBUF[1]){
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 5   

 239   4                  SYNCDELAY;EP6FIFOCFG=0x01+0x08;
 240   4               } else{
 241   4                  SYNCDELAY; EP6FIFOCFG=0x01;
 242   4               } // if
 243   3               FIFORESET=0;         
 244   3          break;
 245   3      
 246   3          case 0x85:
 247   3               // запуск выборки
 248   3               // канал, частоту и сброс на альтеру
 249   3            
 250   3                          ShiftByte(EP2FIFOBUF[1] | 0x80);
 251   3                          ShiftByte(EP2FIFOBUF[2] );
 252   3                          ShiftByte(EP2FIFOBUF[3] );
 253   3                          ShiftByteStart(EP2FIFOBUF[4] );
 254   3      
 255   3                          // массив
 256   3                              kol=EP2FIFOBUF[6];
 257   3                       for(i=6,k=0; k<(kol+2); k++ ){
 258   4                              ShiftByte( EP2FIFOBUF[i]); i++;
 259   4                              ShiftByte( EP2FIFOBUF[i]); i++;
 260   4                              LoadByteCondition(); 
 261   4                       }
 262   3               // переключить ep6 в режим autoin
 263   3               SYNCDELAY;    EP6FIFOCFG = 0x01+0x08;  //  autoin
 264   3               // очистить fifo6
 265   3               SYNCDELAY;FIFORESET=6;  SYNCDELAY;FIFORESET=0;
 266   3      
 267   3               // канал, частоту и  снять сброс 
 268   3               ShiftByte(EP2FIFOBUF[1] );
 269   3                       ShiftByte(EP2FIFOBUF[2] );
 270   3                       ShiftByte(EP2FIFOBUF[3] );
 271   3                       ShiftByteStart(EP2FIFOBUF[4] );
 272   3      
 273   3          break;
 274   3      
 275   3          case 0x8d:
 276   3               // установить TTL
 277   3               // канал, частоту и сброс на альтеру
 278   3      
 279   3                          ShiftByte(EP2FIFOBUF[1] | 0x80);
 280   3                          ShiftByte(EP2FIFOBUF[2] );
 281   3                          ShiftByte(EP2FIFOBUF[3] );
 282   3                          ShiftByteStart(EP2FIFOBUF[4] );
 283   3                          // массив
 284   3                       for(i=6;i<12;){
 285   4                              ShiftByte( EP2FIFOBUF[i]); i++;
 286   4                              ShiftByte( EP2FIFOBUF[i]); i++;
 287   4                              LoadByteCondition(); 
 288   4                       }
 289   3               // переключить ep6 в режим autoin
 290   3               SYNCDELAY;    EP6FIFOCFG = 0x01+0x08;  //  autoin
 291   3               // очистить fifo6
 292   3               SYNCDELAY;FIFORESET=6;  SYNCDELAY;FIFORESET=0;
 293   3      
 294   3               // канал, частоту и  снять сброс 
 295   3                       ShiftByte(EP2FIFOBUF[1] );
 296   3                       ShiftByte(EP2FIFOBUF[2] );
 297   3                       ShiftByte(EP2FIFOBUF[3] );
 298   3                       ShiftByteStart(EP2FIFOBUF[4] );
 299   3      
 300   3          break;
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 6   

 301   3      
 302   3      
 303   3          case 0x8b:
 304   3               // выставить состояние порта с0..4
 305   3               IOC=EP2FIFOBUF[1];
 306   3             //  for(;;){ IOC=0;       SYNCDELAY; IOC=0xff;    SYNCDELAY;}
 307   3          break;
 308   3      
 309   3      
 310   3          case 0x8a:
 311   3               // shift bytes to ad9517
 312   3               setb(OEC,sclk9517);
 313   3                       // ставим \cs
 314   3                       clrb(IOC,cs9517);                                                                         
 315   3               Num=EP2FIFOBUF[1]; // Сколько пишем?
 316   3                       for(b=0;b<Num;b++){
 317   4                           Shift9517(EP2FIFOBUF[b+2]);
 318   4                       }
 319   3                       // Снимаем \CS
 320   3                       setb(IOC,cs9517);
 321   3                       // переводим clk в третье состояние
 322   3               clrb(OEC,sclk9517);
 323   3      
 324   3          break;
 325   3      
 326   3          case 0x8c:
 327   3              /*
 328   3               //  чтение 1 байта из EEPROM
 329   3                       EZUSB_InitI2C();
 330   3                       // передать адрес
 331   3                       EZUSB_WriteI2C(0, 1, EP6FIFOBUF);
 332   3                       EZUSB_Delay(10);
 333   3                       // читать 256 байт из eeprom
 334   3                       EZUSB_ReadI2c(0,255,EP6FIFOBUF);                          
 335   3               SYNCDELAY; EP6BCH=1; SYNCDELAY; EP6BCL=0;         
 336   3              */
 337   3          break;
 338   3      
 339   3      
 340   3          default:
 341   3          break;
 342   3      
 343   3          }// switch
 344   2      
 345   2          SYNCDELAY;EP2BCL = 0x80; // re-arm (skip packet) ep2
 346   2          SYNCDELAY;  FIFORESET = 0x0;
 347   2           
 348   2        } //if ep2 не пустой?
 349   1       }   // TD_Poll
 350          
 351          BOOL TD_Suspend( void )
 352          { // Called before the device goes into suspend mode
 353   1         return( TRUE );
 354   1      }
 355          
 356          BOOL TD_Resume( void )
 357          { // Called after the device resumes
 358   1         return( TRUE );
 359   1      }
 360          
 361          //-----------------------------------------------------------------------------
 362          // Device Request hooks
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 7   

 363          //   The following hooks are called by the end point 0 device request parser.
 364          //-----------------------------------------------------------------------------
 365          BOOL DR_GetDescriptor( void )
 366          {
 367   1         return( TRUE );
 368   1      }
 369          
 370          BOOL DR_SetConfiguration( void )
 371          { // Called when a Set Configuration command is received
 372   1      
 373   1        if( EZUSB_HIGHSPEED( ) )
 374   1        { // ...FX2 in high speed mode
 375   2          SYNCDELAY;                  //
 376   2          EP6AUTOINLENH = 0x02;       // set core AUTO commit len = 512 bytes
 377   2          SYNCDELAY;                  //
 378   2          EP6AUTOINLENL = 0x00;
 379   2          SYNCDELAY;                  //
 380   2          enum_pkt_size = 512;        // max. pkt. size = 512 bytes
 381   2        }
 382   1        else
 383   1        { // ...FX2 in full speed mode
 384   2          SYNCDELAY;                  //
 385   2          EP6AUTOINLENH = 0x00;       // set core AUTO commit len = 64 bytes
 386   2          SYNCDELAY;                  //
 387   2          EP6AUTOINLENL = 0x40;
 388   2          SYNCDELAY;                  //
 389   2          enum_pkt_size = 64;         // max. pkt. size = 64 bytes
 390   2        }
 391   1      
 392   1        Configuration = SETUPDAT[ 2 ];
 393   1        return( TRUE );        // Handled by user code
 394   1      }
 395          
 396          BOOL DR_GetConfiguration( void )
 397          { // Called when a Get Configuration command is received
 398   1         EP0BUF[ 0 ] = Configuration;
 399   1         EP0BCH = 0;
 400   1         EP0BCL = 1;
 401   1         return(TRUE);          // Handled by user code
 402   1      }
 403          
 404          BOOL DR_SetInterface( void )
 405          { // Called when a Set Interface command is received
 406   1         AlternateSetting = SETUPDAT[ 2 ];
 407   1         return( TRUE );        // Handled by user code
 408   1      }
 409          
 410          BOOL DR_GetInterface( void )
 411          { // Called when a Set Interface command is received
 412   1         EP0BUF[ 0 ] = AlternateSetting;
 413   1         EP0BCH = 0;
 414   1         EP0BCL = 1;
 415   1         return( TRUE );        // Handled by user code
 416   1      }
 417          
 418          BOOL DR_GetStatus( void )
 419          {
 420   1         return( TRUE );
 421   1      }
 422          
 423          BOOL DR_ClearFeature( void )
 424          {
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 8   

 425   1         return( TRUE );
 426   1      }
 427          
 428          BOOL DR_SetFeature( void )
 429          {
 430   1         return( TRUE );
 431   1      }
 432          
 433          #define VX_B2 0xB2              // turn OFF debug LEDs...
 434          #define VX_B4 0xB4              // read GPIFTRIG register
 435          #define VX_B5 0xB5              // GPIFABORT
 436          #define VX_B7 0xB7              // re-initialize, call TD_Init( );
 437          #define VX_B8 0xB8              // do a "soft reset", vector to org 00h
 438          #define VX_B9 0xB9              // commit IN pkt. via INPKTEND=6
 439          
 440          // Core uses bRequest value 0xA0 for Anchor downloads/uploads...
 441          // Cypress Semiconductor reserves bRequest values 0xA1 through 0xAF...
 442          // Your implementation should not use the above bRequest values...
 443          // Also, previous fw.c versions trap all bRequest values 0x00 through 0x0F...
 444          //
 445          //   bRequest value: SETUPDAT[1]
 446          //   standard, 0x00 through 0x0F
 447          //
 448          //   bmRequest value: SETUPDAT[0]
 449          //   standard,  0x80 IN   Token
 450          //   vendor,    0xC0 IN   Token
 451          //   class,     0xA0 IN   Token
 452          //   standard,  0x00 OUT  Token
 453          //   vendor,    0x40 OUT  Token
 454          //   class,     0x60 OUT  Token
 455          
 456          BOOL DR_VendorCmnd( void )
 457          {
 458   1      
 459   1        // Registers which require a synchronization delay, see section 15.14
 460   1        // FIFORESET        FIFOPINPOLAR
 461   1        // INPKTEND         OUTPKTEND
 462   1        // EPxBCH:L         REVCTL
 463   1        // GPIFTCB3         GPIFTCB2
 464   1        // GPIFTCB1         GPIFTCB0
 465   1        // EPxFIFOPFH:L     EPxAUTOINLENH:L
 466   1        // EPxFIFOCFG       EPxGPIFFLGSEL
 467   1        // PINFLAGSxx       EPxFIFOIRQ
 468   1        // EPxFIFOIE        GPIFIRQ
 469   1        // GPIFIE           GPIFADRH:L
 470   1        // UDMACRCH:L       EPxGPIFTRIG
 471   1        // GPIFTRIG
 472   1      
 473   1        // Note: The pre-REVE EPxGPIFTCH/L register are affected, as well...
 474   1        //      ...these have been replaced by GPIFTC[B3:B0] registers
 475   1      
 476   1              switch( SETUPDAT[ 1 ] )
 477   1              {
 478   2          case VX_B2:
 479   2          { // turn OFF debug LEDs...
 480   3      
 481   3      
 482   3            *EP0BUF = VX_B2;
 483   3            break;
 484   3          }
 485   2          case VX_B4:
 486   2          {
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 9   

 487   3            *EP0BUF = GPIFTRIG;
 488   3            break;
 489   3          }
 490   2          case VX_B5:
 491   2          {
 492   3            GPIFABORT = 0xFF;
 493   3            *EP0BUF = VX_B5;
 494   3            break;
 495   3          }
 496   2          case VX_B7:
 497   2          {
 498   3            TD_Init( );
 499   3            *EP0BUF = VX_B7;
 500   3            break;
 501   3          }
 502   2          case VX_B8:
 503   2          {
 504   3            EP0BCH = 0;
 505   3            EP0BCL = 1;                   // Arm endpoint with # bytes to transfer
 506   3            EP0CS |= bmHSNAK;             // Acknowledge handshake phase of device request
 507   3            SYNCDELAY;                    // used here as "delay"
 508   3            SYNCDELAY;                    // used here as "delay"
 509   3      
 510   3            EA = 0;
 511   3      
 512   3            // ...do a "soft" code only RESET... vector to ORG 0x0000
 513   3            ( ( void ( code * ) ( void ) ) 0x0000 ) ( );
 514   3      
 515   3            *EP0BUF = VX_B8;
 516   3            break;
 517   3          }
 518   2          case VX_B9:
 519   2          {
 520   3            // AUTOIN=0, so 8051 pass pkt. to host...
 521   3            SYNCDELAY;                //
 522   3            INPKTEND = 0x06;          // ...commit however many bytes in pkt.
 523   3            SYNCDELAY;                //
 524   3                                      // ...NOTE: this also handles "shortpkt"
 525   3            *EP0BUF = VX_B9;
 526   3            break;
 527   3          }
 528   2          default:
 529   2          {
 530   3         //   ledX_rdvar = LED3_ON;     // debug visual, stuck "ON" to warn developer...
 531   3                  return( FALSE );          // no error; command handled OK
 532   3          }
 533   2              }
 534   1      
 535   1        EP0BCH = 0;
 536   1        EP0BCL = 1;                   // Arm endpoint with # bytes to transfer
 537   1        EP0CS |= bmHSNAK;             // Acknowledge handshake phase of device request
 538   1      
 539   1              return( FALSE );              // no error; command handled OK
 540   1      }
 541          
 542          //-----------------------------------------------------------------------------
 543          // USB Interrupt Handlers
 544          //   The following functions are called by the USB interrupt jump table.
 545          //-----------------------------------------------------------------------------
 546          
 547          // Setup Data Available Interrupt Handler
 548          void ISR_Sudav( void ) interrupt 0
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 10  

 549          {
 550   1         GotSUD = TRUE;         // Set flag
 551   1         EZUSB_IRQ_CLEAR( );
 552   1         USBIRQ = bmSUDAV;      // Clear SUDAV IRQ
 553   1      }
 554          
 555          // Setup Token Interrupt Handler
 556          void ISR_Sutok( void ) interrupt 0
 557          {
 558   1         EZUSB_IRQ_CLEAR( );
 559   1         USBIRQ = bmSUTOK;      // Clear SUTOK IRQ
 560   1      }
 561          
 562          void ISR_Sof( void ) interrupt 0
 563          {
 564   1         EZUSB_IRQ_CLEAR( );
 565   1         USBIRQ = bmSOF;        // Clear SOF IRQ
 566   1      }
 567          
 568          void ISR_Ures( void ) interrupt 0
 569          {
 570   1         if ( EZUSB_HIGHSPEED( ) )
 571   1         {
 572   2            pConfigDscr = pHighSpeedConfigDscr;
 573   2            pOtherConfigDscr = pFullSpeedConfigDscr;
 574   2         }
 575   1         else
 576   1         {
 577   2            pConfigDscr = pFullSpeedConfigDscr;
 578   2            pOtherConfigDscr = pHighSpeedConfigDscr;
 579   2         }
 580   1      
 581   1         EZUSB_IRQ_CLEAR( );
 582   1         USBIRQ = bmURES;       // Clear URES IRQ
 583   1      }
 584          
 585          void ISR_Susp( void ) interrupt 0
 586          {
 587   1         Sleep = TRUE;
 588   1         EZUSB_IRQ_CLEAR( );
 589   1         USBIRQ = bmSUSP;
 590   1      }
 591          
 592          void ISR_Highspeed( void ) interrupt 0
 593          {
 594   1         if ( EZUSB_HIGHSPEED( ) )
 595   1         {
 596   2            pConfigDscr = pHighSpeedConfigDscr;
 597   2            pOtherConfigDscr = pFullSpeedConfigDscr;
 598   2         }
 599   1         else
 600   1         {
 601   2            pConfigDscr = pFullSpeedConfigDscr;
 602   2            pOtherConfigDscr = pHighSpeedConfigDscr;
 603   2         }
 604   1      
 605   1         EZUSB_IRQ_CLEAR( );
 606   1         USBIRQ = bmHSGRANT;
 607   1      }
 608          void ISR_Ep0ack( void ) interrupt 0
 609          {
 610   1      }
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 11  

 611          void ISR_Stub( void ) interrupt 0
 612          {
 613   1      }
 614          void ISR_Ep0in( void ) interrupt 0
 615          {
 616   1      }
 617          void ISR_Ep0out( void ) interrupt 0
 618          {
 619   1      }
 620          void ISR_Ep1in( void ) interrupt 0
 621          {
 622   1      }
 623          void ISR_Ep1out( void ) interrupt 0
 624          {
 625   1      }
 626          void ISR_Ep2inout( void ) interrupt 0
 627          {
 628   1      }
 629          void ISR_Ep4inout( void ) interrupt 0
 630          {
 631   1      }
 632          void ISR_Ep6inout( void ) interrupt 0
 633          {
 634   1      }
 635          void ISR_Ep8inout( void ) interrupt 0
 636          {
 637   1      }
 638          void ISR_Ibn( void ) interrupt 0
 639          {
 640   1      }
 641          void ISR_Ep0pingnak( void ) interrupt 0
 642          {
 643   1      }
 644          void ISR_Ep1pingnak( void ) interrupt 0
 645          {
 646   1      }
 647          void ISR_Ep2pingnak( void ) interrupt 0
 648          {
 649   1      }
 650          void ISR_Ep4pingnak( void ) interrupt 0
 651          {
 652   1      }
 653          void ISR_Ep6pingnak( void ) interrupt 0
 654          {
 655   1      }
 656          void ISR_Ep8pingnak( void ) interrupt 0
 657          {
 658   1      }
 659          void ISR_Errorlimit( void ) interrupt 0
 660          {
 661   1      }
 662          void ISR_Ep2piderror( void ) interrupt 0
 663          {
 664   1      }
 665          void ISR_Ep4piderror( void ) interrupt 0
 666          {
 667   1      }
 668          void ISR_Ep6piderror( void ) interrupt 0
 669          {
 670   1      }
 671          void ISR_Ep8piderror( void ) interrupt 0
 672          {
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 12  

 673   1      }
 674          void ISR_Ep2pflag( void ) interrupt 0
 675          {
 676   1      }
 677          void ISR_Ep4pflag( void ) interrupt 0
 678          {
 679   1      }
 680          void ISR_Ep6pflag( void ) interrupt 0
 681          {
 682   1      }
 683          void ISR_Ep8pflag( void ) interrupt 0
 684          {
 685   1      }
 686          void ISR_Ep2eflag( void ) interrupt 0
 687          {
 688   1      }
 689          void ISR_Ep4eflag( void ) interrupt 0
 690          {
 691   1      }
 692          void ISR_Ep6eflag( void ) interrupt 0
 693          {
 694   1      }
 695          void ISR_Ep8eflag( void ) interrupt 0
 696          {
 697   1      }
 698          void ISR_Ep2fflag( void ) interrupt 0
 699          {
 700   1      }
 701          void ISR_Ep4fflag( void ) interrupt 0
 702          {
 703   1      }
 704          void ISR_Ep6fflag( void ) interrupt 0
 705          {
 706   1      }
 707          void ISR_Ep8fflag( void ) interrupt 0
 708          {
 709   1      }
 710          void ISR_GpifComplete( void ) interrupt 0
 711          {
 712   1      }
 713          void ISR_GpifWaveform( void ) interrupt 0
 714          {  // FIFORd WF detected peripheral prematurely empty (less than max. pkt. size)
 715   1      
 716   1        GPIFABORT = 0xFF;             // abort to handle shortpkt
 717   1      
 718   1        SYNCDELAY;                    // used here as "delay"
 719   1              EXIF &=  ~0x40;
 720   1        INT4CLR = 0xFF;               // automatically enabled at POR
 721   1        SYNCDELAY;
 722   1      }
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 13  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION knock (BEGIN)
                                           ; SOURCE LINE # 38
                                           ; SOURCE LINE # 40
0000 53B1FD            ANL     IOE,#0FDH
0003 43B102            ORL     IOE,#02H
                                           ; SOURCE LINE # 41
0006 00                NOP     
0007 00                NOP     
0008 00                NOP     
                                           ; SOURCE LINE # 42
0009 53B1FD            ANL     IOE,#0FDH
                                           ; SOURCE LINE # 43
000C 00                NOP     
000D 00                NOP     
000E 00                NOP     
                                           ; SOURCE LINE # 44
000F 22                RET     
             ; FUNCTION knock (END)

             ; FUNCTION _ShiftOneByte (BEGIN)
                                           ; SOURCE LINE # 46
;---- Variable 'b' assigned to Register 'R5' ----
0000 AD07              MOV     R5,AR7
                                           ; SOURCE LINE # 49
;---- Variable 'i' assigned to Register 'R4' ----
0002 E4                CLR     A
0003 FC                MOV     R4,A
0004         ?C0002:
                                           ; SOURCE LINE # 50
0004 7401              MOV     A,#01H
0006 7E00              MOV     R6,#00H
0008 A804              MOV     R0,AR4
000A 08                INC     R0
000B 8005              SJMP    ?C0129
000D         ?C0128:
000D C3                CLR     C
000E 33                RLC     A
000F CE                XCH     A,R6
0010 33                RLC     A
0011 CE                XCH     A,R6
0012         ?C0129:
0012 D8F9              DJNZ    R0,?C0128
0014 FF                MOV     R7,A
0015 ED                MOV     A,R5
0016 FB                MOV     R3,A
0017 E4                CLR     A
0018 EF                MOV     A,R7
0019 5B                ANL     A,R3
001A 6005              JZ      ?C0005
001C 43B101            ORL     IOE,#01H
001F 8003              SJMP    ?C0006
0021         ?C0005:
0021 53B1FE            ANL     IOE,#0FEH
0024         ?C0006:
                                           ; SOURCE LINE # 51
0024 120000      R     LCALL   knock
                                           ; SOURCE LINE # 52
0027 0C                INC     R4
0028 BC08D9            CJNE    R4,#08H,?C0002
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 14  

                                           ; SOURCE LINE # 53
002B         ?C0007:
002B 22                RET     
             ; FUNCTION _ShiftOneByte (END)

             ; FUNCTION LoadByteCondition (BEGIN)
                                           ; SOURCE LINE # 57
                                           ; SOURCE LINE # 58
0000 43B180            ORL     IOE,#080H
0003 00                NOP     
0004 00                NOP     
0005 00                NOP     
                                           ; SOURCE LINE # 59
0006 43B140            ORL     IOE,#040H
0009 00                NOP     
000A 00                NOP     
000B 00                NOP     
                                           ; SOURCE LINE # 60
000C 53B17F            ANL     IOE,#07FH
000F 00                NOP     
0010 00                NOP     
0011 00                NOP     
                                           ; SOURCE LINE # 61
0012 53B1BF            ANL     IOE,#0BFH
0015 00                NOP     
0016 00                NOP     
0017 00                NOP     
                                           ; SOURCE LINE # 62
0018 22                RET     
             ; FUNCTION LoadByteCondition (END)

             ; FUNCTION StartCondition (BEGIN)
                                           ; SOURCE LINE # 63
                                           ; SOURCE LINE # 64
0000 43B140            ORL     IOE,#040H
0003 00                NOP     
0004 00                NOP     
0005 00                NOP     
                                           ; SOURCE LINE # 65
0006 43B180            ORL     IOE,#080H
0009 00                NOP     
000A 00                NOP     
000B 00                NOP     
                                           ; SOURCE LINE # 66
000C 53B1BF            ANL     IOE,#0BFH
000F 00                NOP     
0010 00                NOP     
0011 00                NOP     
                                           ; SOURCE LINE # 67
0012 53B17F            ANL     IOE,#07FH
0015 00                NOP     
0016 00                NOP     
0017 00                NOP     
                                           ; SOURCE LINE # 68
0018 22                RET     
             ; FUNCTION StartCondition (END)

             ; FUNCTION _ShiftByte (BEGIN)
                                           ; SOURCE LINE # 70
;---- Variable 'b' assigned to Register 'R5' ----
0000 AD07              MOV     R5,AR7
                                           ; SOURCE LINE # 72
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 15  

;---- Variable 'i' assigned to Register 'R4' ----
0002 E4                CLR     A
0003 FC                MOV     R4,A
0004         ?C0010:
                                           ; SOURCE LINE # 73
0004 7401              MOV     A,#01H
0006 7E00              MOV     R6,#00H
0008 A804              MOV     R0,AR4
000A 08                INC     R0
000B 8005              SJMP    ?C0131
000D         ?C0130:
000D C3                CLR     C
000E 33                RLC     A
000F CE                XCH     A,R6
0010 33                RLC     A
0011 CE                XCH     A,R6
0012         ?C0131:
0012 D8F9              DJNZ    R0,?C0130
0014 FF                MOV     R7,A
0015 ED                MOV     A,R5
0016 FB                MOV     R3,A
0017 E4                CLR     A
0018 EF                MOV     A,R7
0019 5B                ANL     A,R3
001A 6005              JZ      ?C0013
001C 43B120            ORL     IOE,#020H
001F 8003              SJMP    ?C0014
0021         ?C0013:
                                           ; SOURCE LINE # 74
0021 53B1DF            ANL     IOE,#0DFH
0024         ?C0014:
                                           ; SOURCE LINE # 75
0024 43B140            ORL     IOE,#040H
0027 00                NOP     
0028 00                NOP     
0029 00                NOP     
                                           ; SOURCE LINE # 76
002A 53B1BF            ANL     IOE,#0BFH
002D 00                NOP     
002E 00                NOP     
002F 00                NOP     
                                           ; SOURCE LINE # 77
0030 0C                INC     R4
0031 BC08D0            CJNE    R4,#08H,?C0010
                                           ; SOURCE LINE # 78
0034         ?C0015:
0034 22                RET     
             ; FUNCTION _ShiftByte (END)

             ; FUNCTION _ShiftByteStart (BEGIN)
                                           ; SOURCE LINE # 79
;---- Variable 'b' assigned to Register 'R5' ----
0000 AD07              MOV     R5,AR7
                                           ; SOURCE LINE # 81
;---- Variable 'i' assigned to Register 'R4' ----
0002 E4                CLR     A
0003 FC                MOV     R4,A
0004         ?C0016:
                                           ; SOURCE LINE # 82
0004 7401              MOV     A,#01H
0006 7E00              MOV     R6,#00H
0008 A804              MOV     R0,AR4
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 16  

000A 08                INC     R0
000B 8005              SJMP    ?C0133
000D         ?C0132:
000D C3                CLR     C
000E 33                RLC     A
000F CE                XCH     A,R6
0010 33                RLC     A
0011 CE                XCH     A,R6
0012         ?C0133:
0012 D8F9              DJNZ    R0,?C0132
0014 FF                MOV     R7,A
0015 ED                MOV     A,R5
0016 FB                MOV     R3,A
0017 E4                CLR     A
0018 EF                MOV     A,R7
0019 5B                ANL     A,R3
001A 6005              JZ      ?C0019
001C 43B120            ORL     IOE,#020H
001F 8003              SJMP    ?C0020
0021         ?C0019:
                                           ; SOURCE LINE # 83
0021 53B1DF            ANL     IOE,#0DFH
0024         ?C0020:
                                           ; SOURCE LINE # 84
0024 43B140            ORL     IOE,#040H
0027 00                NOP     
0028 00                NOP     
0029 00                NOP     
                                           ; SOURCE LINE # 85
002A 53B1BF            ANL     IOE,#0BFH
002D 00                NOP     
002E 00                NOP     
002F 00                NOP     
                                           ; SOURCE LINE # 86
0030 0C                INC     R4
0031 BC07D0            CJNE    R4,#07H,?C0016
0034         ?C0017:
                                           ; SOURCE LINE # 87
0034 ED                MOV     A,R5
0035 30E705            JNB     ACC.7,?C0021
0038 43B120            ORL     IOE,#020H
003B 8003              SJMP    ?C0022
003D         ?C0021:
                                           ; SOURCE LINE # 88
003D 53B1DF            ANL     IOE,#0DFH
0040         ?C0022:
                                           ; SOURCE LINE # 89
0040 120000      R     LCALL   StartCondition
                                           ; SOURCE LINE # 90
0043 22                RET     
             ; FUNCTION _ShiftByteStart (END)

             ; FUNCTION _Shift9517 (BEGIN)
                                           ; SOURCE LINE # 94
;---- Variable 'b' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 96
;---- Variable 'i' assigned to Register 'R6' ----
0000 7E80              MOV     R6,#080H
0002         ?C0024:
0002 EE                MOV     A,R6
0003 601D              JZ      ?C0029
                                           ; SOURCE LINE # 97
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 17  

0005 5F                ANL     A,R7
0006 6005              JZ      ?C0027
0008 43A002            ORL     IOC,#02H
000B 8003              SJMP    ?C0028
000D         ?C0027:
000D 53A0FD            ANL     IOC,#0FDH
0010         ?C0028:
                                           ; SOURCE LINE # 98
0010 00                NOP     
0011 00                NOP     
0012 00                NOP     
                                           ; SOURCE LINE # 99
0013 53A0EF            ANL     IOC,#0EFH
0016 00                NOP     
0017 00                NOP     
0018 00                NOP     
0019 43A010            ORL     IOC,#010H
                                           ; SOURCE LINE # 100
001C EE                MOV     A,R6
001D C3                CLR     C
001E 13                RRC     A
001F FE                MOV     R6,A
0020 80E0              SJMP    ?C0024
                                           ; SOURCE LINE # 102
0022         ?C0029:
0022 22                RET     
             ; FUNCTION _Shift9517 (END)

             ; FUNCTION TD_Init (BEGIN)
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 121
0000 900000      E     MOV     DPTR,#CPUCS
0003 7410              MOV     A,#010H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 124
0006 00                NOP     
0007 00                NOP     
0008 00                NOP     
0009 900000      E     MOV     DPTR,#IFCONFIG
000C 74E3              MOV     A,#0E3H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 127
000F 00                NOP     
0010 00                NOP     
0011 00                NOP     
0012 900000      E     MOV     DPTR,#EP2CFG
0015 74A2              MOV     A,#0A2H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 128
0018 00                NOP     
0019 00                NOP     
001A 00                NOP     
001B 900000      E     MOV     DPTR,#EP6CFG
001E 74E2              MOV     A,#0E2H
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 129
0021 00                NOP     
0022 00                NOP     
0023 00                NOP     
0024 900000      E     MOV     DPTR,#EP8CFG
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 132
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 18  

0028 00                NOP     
0029 00                NOP     
002A 00                NOP     
002B 900000      E     MOV     DPTR,#EP4CFG
002E 7420              MOV     A,#020H
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 135
0031 00                NOP     
0032 00                NOP     
0033 00                NOP     
0034 900000      E     MOV     DPTR,#FIFORESET
0037 7480              MOV     A,#080H
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
003A 00                NOP     
003B 00                NOP     
003C 00                NOP     
003D 7402              MOV     A,#02H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 137
0040 00                NOP     
0041 00                NOP     
0042 00                NOP     
0043 7404              MOV     A,#04H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 138
0046 00                NOP     
0047 00                NOP     
0048 00                NOP     
0049 7406              MOV     A,#06H
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 139
004C 00                NOP     
004D 00                NOP     
004E 00                NOP     
004F 7408              MOV     A,#08H
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 140
0052 00                NOP     
0053 00                NOP     
0054 00                NOP     
0055 E4                CLR     A
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 143
0057 00                NOP     
0058 00                NOP     
0059 00                NOP     
005A 900000      E     MOV     DPTR,#EP2FIFOCFG
005D 04                INC     A
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
005F 00                NOP     
0060 00                NOP     
0061 00                NOP     
0062 900000      E     MOV     DPTR,#EP6FIFOCFG
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 147
0066 00                NOP     
0067 00                NOP     
0068 00                NOP     
0069 900000      E     MOV     DPTR,#PINFLAGSAB
006C 740E              MOV     A,#0EH
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 19  

006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 151
006F 00                NOP     
0070 00                NOP     
0071 00                NOP     
0072 900000      E     MOV     DPTR,#EP2BCL
0075 7480              MOV     A,#080H
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 152
0078 00                NOP     
0079 00                NOP     
007A 00                NOP     
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 153
007C 00                NOP     
007D 00                NOP     
007E 00                NOP     
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
0080 00                NOP     
0081 00                NOP     
0082 00                NOP     
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 160
0084 900000      E     MOV     DPTR,#INTSETUP
0087 E0                MOVX    A,@DPTR
0088 4403              ORL     A,#03H
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 161
008B 00                NOP     
008C 00                NOP     
008D 00                NOP     
                                           ; SOURCE LINE # 162
008E 5391BF            ANL     EXIF,#0BFH
                                           ; SOURCE LINE # 163
0091 00                NOP     
0092 00                NOP     
0093 00                NOP     
                                           ; SOURCE LINE # 164
0094 900000      E     MOV     DPTR,#GPIFIRQ
0097 7402              MOV     A,#02H
0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 165
009A 00                NOP     
009B 00                NOP     
009C 00                NOP     
009D 900000      E     MOV     DPTR,#GPIFIE
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 166
00A1 00                NOP     
00A2 00                NOP     
00A3 00                NOP     
00A4 43E804            ORL     EIE,#04H
                                           ; SOURCE LINE # 169
00A7 43B601            ORL     OEE,#01H
                                           ; SOURCE LINE # 170
00AA 53B1FD            ANL     IOE,#0FDH
00AD 43B602            ORL     OEE,#02H
                                           ; SOURCE LINE # 171
00B0 43B104            ORL     IOE,#04H
00B3 43B604            ORL     OEE,#04H
                                           ; SOURCE LINE # 172
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 20  

00B6 53B1DF            ANL     IOE,#0DFH
00B9 43B620            ORL     OEE,#020H
                                           ; SOURCE LINE # 173
00BC 53B1BF            ANL     IOE,#0BFH
00BF 43B640            ORL     OEE,#040H
                                           ; SOURCE LINE # 174
00C2 53B17F            ANL     IOE,#07FH
00C5 43B680            ORL     OEE,#080H
                                           ; SOURCE LINE # 177
00C8 75A01F            MOV     IOC,#01FH
                                           ; SOURCE LINE # 178
00CB 75B41F            MOV     OEC,#01FH
                                           ; SOURCE LINE # 181
00CE 22                RET     
             ; FUNCTION TD_Init (END)

             ; FUNCTION TD_Poll (BEGIN)
                                           ; SOURCE LINE # 193
                                           ; SOURCE LINE # 197
0000 E5AA              MOV     A,EP2468STAT
0002 30E003            JNB     ACC.0,$ + 6H
0005 020000      R     LJMP    ?C0060
                                           ; SOURCE LINE # 199
0008 900000      E     MOV     DPTR,#EP2FIFOBUF
000B E0                MOVX    A,@DPTR
000C F500        R     MOV     b,A
                                           ; SOURCE LINE # 200
000E 00                NOP     
000F 00                NOP     
0010 00                NOP     
0011 900000      E     MOV     DPTR,#FIFORESET
0014 7480              MOV     A,#080H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
0017 E500        R     MOV     A,b
0019 120000      E     LCALL   ?C?CCASE
001C 0000        R     DW      ?C0033
001E 80                DB      080H
001F 0000        R     DW      ?C0034
0021 81                DB      081H
0022 0000        R     DW      ?C0038
0024 82                DB      082H
0025 0000        R     DW      ?C0042
0027 83                DB      083H
0028 0000        R     DW      ?C0043
002A 84                DB      084H
002B 0000        R     DW      ?C0046
002D 85                DB      085H
002E 0000        R     DW      ?C0054
0030 8A                DB      08AH
0031 0000        R     DW      ?C0053
0033 8B                DB      08BH
0034 0000        R     DW      ?C0050
0036 8D                DB      08DH
0037 0000              DW      00H
0039 0000        R     DW      ?C0032
                                           ; SOURCE LINE # 203
003B         ?C0033:
                                           ; SOURCE LINE # 205
003B 00                NOP     
003C 00                NOP     
003D 00                NOP     
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 21  

003E 900000      E     MOV     DPTR,#EP6FIFOCFG
0041 7401              MOV     A,#01H
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 206
0044 00                NOP     
0045 00                NOP     
0046 00                NOP     
0047 900000      E     MOV     DPTR,#FIFORESET
004A 7406              MOV     A,#06H
004C F0                MOVX    @DPTR,A
004D 00                NOP     
004E 00                NOP     
004F 00                NOP     
0050 E4                CLR     A
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 208
0052 53B1FB            ANL     IOE,#0FBH
0055 7F01              MOV     R7,#01H
0057 FE                MOV     R6,A
0058 120000      E     LCALL   _EZUSB_Delay
005B 43B104            ORL     IOE,#04H
005E 7F01              MOV     R7,#01H
0060 7E00              MOV     R6,#00H
0062 120000      E     LCALL   _EZUSB_Delay
                                           ; SOURCE LINE # 209
0065 020000      R     LJMP    ?C0032
                                           ; SOURCE LINE # 211
0068         ?C0034:
                                           ; SOURCE LINE # 214
0068 900000      E     MOV     DPTR,#EP2FIFOBUF+02H
006B E0                MOVX    A,@DPTR
006C FE                MOV     R6,A
006D 900000      E     MOV     DPTR,#EP2FIFOBUF+01H
0070 E0                MOVX    A,@DPTR
0071 7C00              MOV     R4,#00H
0073 2400              ADD     A,#00H
0075 F500        R     MOV     num+01H,A
0077 EC                MOV     A,R4
0078 3E                ADDC    A,R6
0079 F500        R     MOV     num,A
                                           ; SOURCE LINE # 216
007B 750000      R     MOV     i,#00H
007E 750003      R     MOV     i+01H,#03H
0081         ?C0035:
0081 E500        R     MOV     A,num+01H
0083 2403              ADD     A,#03H
0085 FF                MOV     R7,A
0086 E4                CLR     A
0087 3500        R     ADDC    A,num
0089 FE                MOV     R6,A
008A C3                CLR     C
008B E500        R     MOV     A,i+01H
008D 9F                SUBB    A,R7
008E E500        R     MOV     A,i
0090 9E                SUBB    A,R6
0091 4003              JC      $ + 5H
0093 020000      R     LJMP    ?C0032
                                           ; SOURCE LINE # 217
0096 7400        E     MOV     A,#LOW EP2FIFOBUF
0098 2500        R     ADD     A,i+01H
009A F582              MOV     DPL,A
009C 7400        E     MOV     A,#HIGH EP2FIFOBUF
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 22  

009E 3500        R     ADDC    A,i
00A0 F583              MOV     DPH,A
00A2 E0                MOVX    A,@DPTR
00A3 FF                MOV     R7,A
00A4 120000      R     LCALL   _ShiftOneByte
                                           ; SOURCE LINE # 218
00A7 0500        R     INC     i+01H
00A9 E500        R     MOV     A,i+01H
00AB 7002              JNZ     ?C0134
00AD 0500        R     INC     i
00AF         ?C0134:
00AF 80D0              SJMP    ?C0035
                                           ; SOURCE LINE # 220
                                           ; SOURCE LINE # 222
00B1         ?C0038:
                                           ; SOURCE LINE # 224
00B1 E4                CLR     A
00B2 F500        R     MOV     i,A
00B4 F500        R     MOV     i+01H,A
00B6         ?C0039:
00B6 120000      R     LCALL   knock
00B9 0500        R     INC     i+01H
00BB E500        R     MOV     A,i+01H
00BD 7002              JNZ     ?C0135
00BF 0500        R     INC     i
00C1         ?C0135:
00C1 C3                CLR     C
00C2 9464              SUBB    A,#064H
00C4 E500        R     MOV     A,i
00C6 9400              SUBB    A,#00H
00C8 40EC              JC      ?C0039
00CA         ?C0040:
                                           ; SOURCE LINE # 226
00CA 7F01              MOV     R7,#01H
00CC 7E00              MOV     R6,#00H
00CE 120000      E     LCALL   _EZUSB_Delay
                                           ; SOURCE LINE # 227
00D1 020000      R     LJMP    ?C0032
                                           ; SOURCE LINE # 229
00D4         ?C0042:
                                           ; SOURCE LINE # 231
00D4 900000      E     MOV     DPTR,#EP6FIFOBUF
00D7 E5B1              MOV     A,IOE
00D9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 232
00DA 00                NOP     
00DB 00                NOP     
00DC 00                NOP     
00DD 900000      E     MOV     DPTR,#EP6BCH
00E0 7401              MOV     A,#01H
00E2 F0                MOVX    @DPTR,A
00E3 00                NOP     
00E4 00                NOP     
00E5 00                NOP     
00E6 E4                CLR     A
00E7 900000      E     MOV     DPTR,#EP6BCL
00EA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 233
00EB 020000      R     LJMP    ?C0032
                                           ; SOURCE LINE # 235
00EE         ?C0043:
                                           ; SOURCE LINE # 237
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 23  

00EE 00                NOP     
00EF 00                NOP     
00F0 00                NOP     
00F1 900000      E     MOV     DPTR,#FIFORESET
00F4 7406              MOV     A,#06H
00F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 238
00F7 900000      E     MOV     DPTR,#EP2FIFOBUF+01H
00FA E0                MOVX    A,@DPTR
00FB 600B              JZ      ?C0044
                                           ; SOURCE LINE # 239
00FD 00                NOP     
00FE 00                NOP     
00FF 00                NOP     
0100 900000      E     MOV     DPTR,#EP6FIFOCFG
0103 7409              MOV     A,#09H
0105 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 240
0106 8009              SJMP    ?C0045
0108         ?C0044:
                                           ; SOURCE LINE # 241
0108 00                NOP     
0109 00                NOP     
010A 00                NOP     
010B 900000      E     MOV     DPTR,#EP6FIFOCFG
010E 7401              MOV     A,#01H
0110 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 242
0111         ?C0045:
                                           ; SOURCE LINE # 243
0111 E4                CLR     A
0112 900000      E     MOV     DPTR,#FIFORESET
0115 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 244
0116 020000      R     LJMP    ?C0032
                                           ; SOURCE LINE # 246
0119         ?C0046:
                                           ; SOURCE LINE # 250
0119 900000      E     MOV     DPTR,#EP2FIFOBUF+01H
011C E0                MOVX    A,@DPTR
011D 4480              ORL     A,#080H
011F FF                MOV     R7,A
0120 120000      R     LCALL   _ShiftByte
                                           ; SOURCE LINE # 251
0123 A3                INC     DPTR
0124 E0                MOVX    A,@DPTR
0125 FF                MOV     R7,A
0126 120000      R     LCALL   _ShiftByte
                                           ; SOURCE LINE # 252
0129 A3                INC     DPTR
012A E0                MOVX    A,@DPTR
012B FF                MOV     R7,A
012C 120000      R     LCALL   _ShiftByte
                                           ; SOURCE LINE # 253
012F A3                INC     DPTR
0130 E0                MOVX    A,@DPTR
0131 FF                MOV     R7,A
0132 120000      R     LCALL   _ShiftByteStart
                                           ; SOURCE LINE # 256
0135 900000      E     MOV     DPTR,#EP2FIFOBUF+06H
0138 E0                MOVX    A,@DPTR
;---- Variable 'kol' assigned to Register 'R1' ----
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 24  

0139 F9                MOV     R1,A
                                           ; SOURCE LINE # 257
013A 750000      R     MOV     i,#00H
013D 750006      R     MOV     i+01H,#06H
;---- Variable 'k' assigned to Register 'R2' ----
0140 E4                CLR     A
0141 FA                MOV     R2,A
0142         ?C0047:
0142 E9                MOV     A,R1
0143 2402              ADD     A,#02H
0145 FF                MOV     R7,A
0146 E4                CLR     A
0147 33                RLC     A
0148 FE                MOV     R6,A
0149 EA                MOV     A,R2
014A C3                CLR     C
014B 9F                SUBB    A,R7
014C EE                MOV     A,R6
014D 6480              XRL     A,#080H
014F F8                MOV     R0,A
0150 7480              MOV     A,#080H
0152 98                SUBB    A,R0
0153 5036              JNC     ?C0048
                                           ; SOURCE LINE # 258
0155 7400        E     MOV     A,#LOW EP2FIFOBUF
0157 2500        R     ADD     A,i+01H
0159 F582              MOV     DPL,A
015B 7400        E     MOV     A,#HIGH EP2FIFOBUF
015D 3500        R     ADDC    A,i
015F F583              MOV     DPH,A
0161 E0                MOVX    A,@DPTR
0162 FF                MOV     R7,A
0163 120000      R     LCALL   _ShiftByte
0166 0500        R     INC     i+01H
0168 E500        R     MOV     A,i+01H
016A 7002              JNZ     ?C0136
016C 0500        R     INC     i
016E         ?C0136:
                                           ; SOURCE LINE # 259
016E 2400        E     ADD     A,#LOW EP2FIFOBUF
0170 F582              MOV     DPL,A
0172 7400        E     MOV     A,#HIGH EP2FIFOBUF
0174 3500        R     ADDC    A,i
0176 F583              MOV     DPH,A
0178 E0                MOVX    A,@DPTR
0179 FF                MOV     R7,A
017A 120000      R     LCALL   _ShiftByte
017D 0500        R     INC     i+01H
017F E500        R     MOV     A,i+01H
0181 7002              JNZ     ?C0137
0183 0500        R     INC     i
0185         ?C0137:
                                           ; SOURCE LINE # 260
0185 120000      R     LCALL   LoadByteCondition
                                           ; SOURCE LINE # 261
0188 0A                INC     R2
0189 80B7              SJMP    ?C0047
018B         ?C0048:
                                           ; SOURCE LINE # 263
018B 00                NOP     
018C 00                NOP     
018D 00                NOP     
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 25  

018E 900000      E     MOV     DPTR,#EP6FIFOCFG
0191 7409              MOV     A,#09H
0193 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 265
0194 00                NOP     
0195 00                NOP     
0196 00                NOP     
0197 900000      E     MOV     DPTR,#FIFORESET
019A 7406              MOV     A,#06H
019C F0                MOVX    @DPTR,A
019D 00                NOP     
019E 00                NOP     
019F 00                NOP     
01A0 E4                CLR     A
01A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 268
01A2 900000      E     MOV     DPTR,#EP2FIFOBUF+01H
01A5 E0                MOVX    A,@DPTR
01A6 FF                MOV     R7,A
01A7 120000      R     LCALL   _ShiftByte
                                           ; SOURCE LINE # 269
01AA A3                INC     DPTR
01AB E0                MOVX    A,@DPTR
01AC FF                MOV     R7,A
01AD 120000      R     LCALL   _ShiftByte
                                           ; SOURCE LINE # 270
01B0 A3                INC     DPTR
01B1 E0                MOVX    A,@DPTR
01B2 FF                MOV     R7,A
01B3 120000      R     LCALL   _ShiftByte
                                           ; SOURCE LINE # 271
01B6 A3                INC     DPTR
01B7 E0                MOVX    A,@DPTR
01B8 FF                MOV     R7,A
01B9 120000      R     LCALL   _ShiftByteStart
                                           ; SOURCE LINE # 273
01BC 020000      R     LJMP    ?C0032
                                           ; SOURCE LINE # 275
01BF         ?C0050:
                                           ; SOURCE LINE # 279
01BF 900000      E     MOV     DPTR,#EP2FIFOBUF+01H
01C2 E0                MOVX    A,@DPTR
01C3 4480              ORL     A,#080H
01C5 FF                MOV     R7,A
01C6 120000      R     LCALL   _ShiftByte
                                           ; SOURCE LINE # 280
01C9 A3                INC     DPTR
01CA E0                MOVX    A,@DPTR
01CB FF                MOV     R7,A
01CC 120000      R     LCALL   _ShiftByte
                                           ; SOURCE LINE # 281
01CF A3                INC     DPTR
01D0 E0                MOVX    A,@DPTR
01D1 FF                MOV     R7,A
01D2 120000      R     LCALL   _ShiftByte
                                           ; SOURCE LINE # 282
01D5 A3                INC     DPTR
01D6 E0                MOVX    A,@DPTR
01D7 FF                MOV     R7,A
01D8 120000      R     LCALL   _ShiftByteStart
                                           ; SOURCE LINE # 284
01DB 750000      R     MOV     i,#00H
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 26  

01DE 750006      R     MOV     i+01H,#06H
01E1         ?C0051:
01E1 C3                CLR     C
01E2 E500        R     MOV     A,i+01H
01E4 940C              SUBB    A,#0CH
01E6 E500        R     MOV     A,i
01E8 9400              SUBB    A,#00H
01EA 5035              JNC     ?C0052
                                           ; SOURCE LINE # 285
01EC 7400        E     MOV     A,#LOW EP2FIFOBUF
01EE 2500        R     ADD     A,i+01H
01F0 F582              MOV     DPL,A
01F2 7400        E     MOV     A,#HIGH EP2FIFOBUF
01F4 3500        R     ADDC    A,i
01F6 F583              MOV     DPH,A
01F8 E0                MOVX    A,@DPTR
01F9 FF                MOV     R7,A
01FA 120000      R     LCALL   _ShiftByte
01FD 0500        R     INC     i+01H
01FF E500        R     MOV     A,i+01H
0201 7002              JNZ     ?C0138
0203 0500        R     INC     i
0205         ?C0138:
                                           ; SOURCE LINE # 286
0205 2400        E     ADD     A,#LOW EP2FIFOBUF
0207 F582              MOV     DPL,A
0209 7400        E     MOV     A,#HIGH EP2FIFOBUF
020B 3500        R     ADDC    A,i
020D F583              MOV     DPH,A
020F E0                MOVX    A,@DPTR
0210 FF                MOV     R7,A
0211 120000      R     LCALL   _ShiftByte
0214 0500        R     INC     i+01H
0216 E500        R     MOV     A,i+01H
0218 7002              JNZ     ?C0139
021A 0500        R     INC     i
021C         ?C0139:
                                           ; SOURCE LINE # 287
021C 120000      R     LCALL   LoadByteCondition
                                           ; SOURCE LINE # 288
021F 80C0              SJMP    ?C0051
0221         ?C0052:
                                           ; SOURCE LINE # 290
0221 00                NOP     
0222 00                NOP     
0223 00                NOP     
0224 900000      E     MOV     DPTR,#EP6FIFOCFG
0227 7409              MOV     A,#09H
0229 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 292
022A 00                NOP     
022B 00                NOP     
022C 00                NOP     
022D 900000      E     MOV     DPTR,#FIFORESET
0230 7406              MOV     A,#06H
0232 F0                MOVX    @DPTR,A
0233 00                NOP     
0234 00                NOP     
0235 00                NOP     
0236 E4                CLR     A
0237 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 295
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 27  

0238 900000      E     MOV     DPTR,#EP2FIFOBUF+01H
023B E0                MOVX    A,@DPTR
023C FF                MOV     R7,A
023D 120000      R     LCALL   _ShiftByte
                                           ; SOURCE LINE # 296
0240 A3                INC     DPTR
0241 E0                MOVX    A,@DPTR
0242 FF                MOV     R7,A
0243 120000      R     LCALL   _ShiftByte
                                           ; SOURCE LINE # 297
0246 A3                INC     DPTR
0247 E0                MOVX    A,@DPTR
0248 FF                MOV     R7,A
0249 120000      R     LCALL   _ShiftByte
                                           ; SOURCE LINE # 298
024C A3                INC     DPTR
024D E0                MOVX    A,@DPTR
024E FF                MOV     R7,A
024F 120000      R     LCALL   _ShiftByteStart
                                           ; SOURCE LINE # 300
0252 8036              SJMP    ?C0032
                                           ; SOURCE LINE # 303
0254         ?C0053:
                                           ; SOURCE LINE # 305
0254 900000      E     MOV     DPTR,#EP2FIFOBUF+01H
0257 E0                MOVX    A,@DPTR
0258 F5A0              MOV     IOC,A
                                           ; SOURCE LINE # 307
025A 802E              SJMP    ?C0032
                                           ; SOURCE LINE # 310
025C         ?C0054:
                                           ; SOURCE LINE # 312
025C 43B410            ORL     OEC,#010H
                                           ; SOURCE LINE # 314
025F 53A0F7            ANL     IOC,#0F7H
                                           ; SOURCE LINE # 315
0262 900000      E     MOV     DPTR,#EP2FIFOBUF+01H
0265 E0                MOVX    A,@DPTR
;---- Variable 'Num' assigned to Register 'R5' ----
0266 FD                MOV     R5,A
                                           ; SOURCE LINE # 316
0267 E4                CLR     A
0268 F500        R     MOV     b,A
026A         ?C0055:
026A E500        R     MOV     A,b
026C C3                CLR     C
026D 9D                SUBB    A,R5
026E 5014              JNC     ?C0056
                                           ; SOURCE LINE # 317
0270 7400        E     MOV     A,#LOW EP2FIFOBUF+02H
0272 2500        R     ADD     A,b
0274 F582              MOV     DPL,A
0276 E4                CLR     A
0277 3400        E     ADDC    A,#HIGH EP2FIFOBUF+02H
0279 F583              MOV     DPH,A
027B E0                MOVX    A,@DPTR
027C FF                MOV     R7,A
027D 120000      R     LCALL   _Shift9517
                                           ; SOURCE LINE # 318
0280 0500        R     INC     b
0282 80E6              SJMP    ?C0055
0284         ?C0056:
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 28  

                                           ; SOURCE LINE # 320
0284 43A008            ORL     IOC,#08H
                                           ; SOURCE LINE # 322
0287 53B4EF            ANL     OEC,#0EFH
                                           ; SOURCE LINE # 324
                                           ; SOURCE LINE # 326
                                           ; SOURCE LINE # 337
                                           ; SOURCE LINE # 340
                                           ; SOURCE LINE # 341
                                           ; SOURCE LINE # 343
028A         ?C0032:
                                           ; SOURCE LINE # 345
028A 00                NOP     
028B 00                NOP     
028C 00                NOP     
028D 900000      E     MOV     DPTR,#EP2BCL
0290 7480              MOV     A,#080H
0292 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 346
0293 00                NOP     
0294 00                NOP     
0295 00                NOP     
0296 E4                CLR     A
0297 900000      E     MOV     DPTR,#FIFORESET
029A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 348
                                           ; SOURCE LINE # 349
029B         ?C0060:
029B 22                RET     
             ; FUNCTION TD_Poll (END)

             ; FUNCTION TD_Suspend (BEGIN)
                                           ; SOURCE LINE # 351
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 353
0000 D3                SETB    C
                                           ; SOURCE LINE # 354
0001         ?C0061:
0001 22                RET     
             ; FUNCTION TD_Suspend (END)

             ; FUNCTION TD_Resume (BEGIN)
                                           ; SOURCE LINE # 356
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 358
0000 D3                SETB    C
                                           ; SOURCE LINE # 359
0001         ?C0062:
0001 22                RET     
             ; FUNCTION TD_Resume (END)

             ; FUNCTION DR_GetDescriptor (BEGIN)
                                           ; SOURCE LINE # 365
                                           ; SOURCE LINE # 366
                                           ; SOURCE LINE # 367
0000 D3                SETB    C
                                           ; SOURCE LINE # 368
0001         ?C0063:
0001 22                RET     
             ; FUNCTION DR_GetDescriptor (END)

             ; FUNCTION DR_SetConfiguration (BEGIN)
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 29  

                                           ; SOURCE LINE # 370
                                           ; SOURCE LINE # 371
                                           ; SOURCE LINE # 373
0000 900000      E     MOV     DPTR,#USBCS
0003 E0                MOVX    A,@DPTR
0004 30E71B            JNB     ACC.7,?C0064
                                           ; SOURCE LINE # 374
                                           ; SOURCE LINE # 375
0007 00                NOP     
0008 00                NOP     
0009 00                NOP     
                                           ; SOURCE LINE # 376
000A 900000      E     MOV     DPTR,#EP6AUTOINLENH
000D 7402              MOV     A,#02H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 377
0010 00                NOP     
0011 00                NOP     
0012 00                NOP     
                                           ; SOURCE LINE # 378
0013 E4                CLR     A
0014 900000      E     MOV     DPTR,#EP6AUTOINLENL
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 379
0018 00                NOP     
0019 00                NOP     
001A 00                NOP     
                                           ; SOURCE LINE # 380
001B 750002      R     MOV     enum_pkt_size,#02H
001E F500        R     MOV     enum_pkt_size+01H,A
                                           ; SOURCE LINE # 381
0020 8019              SJMP    ?C0065
0022         ?C0064:
                                           ; SOURCE LINE # 383
                                           ; SOURCE LINE # 384
0022 00                NOP     
0023 00                NOP     
0024 00                NOP     
                                           ; SOURCE LINE # 385
0025 E4                CLR     A
0026 900000      E     MOV     DPTR,#EP6AUTOINLENH
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 386
002A 00                NOP     
002B 00                NOP     
002C 00                NOP     
                                           ; SOURCE LINE # 387
002D 900000      E     MOV     DPTR,#EP6AUTOINLENL
0030 7440              MOV     A,#040H
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 388
0033 00                NOP     
0034 00                NOP     
0035 00                NOP     
                                           ; SOURCE LINE # 389
0036 750000      R     MOV     enum_pkt_size,#00H
0039 F500        R     MOV     enum_pkt_size+01H,A
                                           ; SOURCE LINE # 390
003B         ?C0065:
                                           ; SOURCE LINE # 392
003B 900000      E     MOV     DPTR,#SETUPDAT+02H
003E E0                MOVX    A,@DPTR
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 30  

003F F500        R     MOV     Configuration,A
                                           ; SOURCE LINE # 393
0041 D3                SETB    C
                                           ; SOURCE LINE # 394
0042         ?C0066:
0042 22                RET     
             ; FUNCTION DR_SetConfiguration (END)

             ; FUNCTION DR_GetConfiguration (BEGIN)
                                           ; SOURCE LINE # 396
                                           ; SOURCE LINE # 397
                                           ; SOURCE LINE # 398
0000 900000      E     MOV     DPTR,#EP0BUF
0003 E500        R     MOV     A,Configuration
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 399
0006 E4                CLR     A
0007 900000      E     MOV     DPTR,#EP0BCH
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 400
000B 900000      E     MOV     DPTR,#EP0BCL
000E 04                INC     A
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 401
0010 D3                SETB    C
                                           ; SOURCE LINE # 402
0011         ?C0067:
0011 22                RET     
             ; FUNCTION DR_GetConfiguration (END)

             ; FUNCTION DR_SetInterface (BEGIN)
                                           ; SOURCE LINE # 404
                                           ; SOURCE LINE # 405
                                           ; SOURCE LINE # 406
0000 900000      E     MOV     DPTR,#SETUPDAT+02H
0003 E0                MOVX    A,@DPTR
0004 F500        R     MOV     AlternateSetting,A
                                           ; SOURCE LINE # 407
0006 D3                SETB    C
                                           ; SOURCE LINE # 408
0007         ?C0068:
0007 22                RET     
             ; FUNCTION DR_SetInterface (END)

             ; FUNCTION DR_GetInterface (BEGIN)
                                           ; SOURCE LINE # 410
                                           ; SOURCE LINE # 411
                                           ; SOURCE LINE # 412
0000 900000      E     MOV     DPTR,#EP0BUF
0003 E500        R     MOV     A,AlternateSetting
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 413
0006 E4                CLR     A
0007 900000      E     MOV     DPTR,#EP0BCH
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 414
000B 900000      E     MOV     DPTR,#EP0BCL
000E 04                INC     A
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 415
0010 D3                SETB    C
                                           ; SOURCE LINE # 416
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 31  

0011         ?C0069:
0011 22                RET     
             ; FUNCTION DR_GetInterface (END)

             ; FUNCTION DR_GetStatus (BEGIN)
                                           ; SOURCE LINE # 418
                                           ; SOURCE LINE # 419
                                           ; SOURCE LINE # 420
0000 D3                SETB    C
                                           ; SOURCE LINE # 421
0001         ?C0070:
0001 22                RET     
             ; FUNCTION DR_GetStatus (END)

             ; FUNCTION DR_ClearFeature (BEGIN)
                                           ; SOURCE LINE # 423
                                           ; SOURCE LINE # 424
                                           ; SOURCE LINE # 425
0000 D3                SETB    C
                                           ; SOURCE LINE # 426
0001         ?C0071:
0001 22                RET     
             ; FUNCTION DR_ClearFeature (END)

             ; FUNCTION DR_SetFeature (BEGIN)
                                           ; SOURCE LINE # 428
                                           ; SOURCE LINE # 429
                                           ; SOURCE LINE # 430
0000 D3                SETB    C
                                           ; SOURCE LINE # 431
0001         ?C0072:
0001 22                RET     
             ; FUNCTION DR_SetFeature (END)

             ; FUNCTION DR_VendorCmnd (BEGIN)
                                           ; SOURCE LINE # 456
                                           ; SOURCE LINE # 457
                                           ; SOURCE LINE # 476
0000 900000      E     MOV     DPTR,#SETUPDAT+01H
0003 E0                MOVX    A,@DPTR
0004 244C              ADD     A,#04CH
0006 6019              JZ      ?C0075
0008 14                DEC     A
0009 601E              JZ      ?C0076
000B 24FE              ADD     A,#0FEH
000D 6028              JZ      ?C0077
000F 14                DEC     A
0010 6030              JZ      ?C0078
0012 14                DEC     A
0013 6051              JZ      ?C0079
0015 2407              ADD     A,#07H
0017 7061              JNZ     ?C0080
                                           ; SOURCE LINE # 477
                                           ; SOURCE LINE # 478
0019         ?C0074:
                                           ; SOURCE LINE # 479
                                           ; SOURCE LINE # 482
0019 900000      E     MOV     DPTR,#EP0BUF
001C 74B2              MOV     A,#0B2H
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 483
001F 805B              SJMP    ?C0073
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 32  

                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 485
0021         ?C0075:
                                           ; SOURCE LINE # 486
                                           ; SOURCE LINE # 487
0021 900000      E     MOV     DPTR,#EP0BUF
0024 E5BB              MOV     A,GPIFTRIG
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 488
0027 8053              SJMP    ?C0073
                                           ; SOURCE LINE # 489
                                           ; SOURCE LINE # 490
0029         ?C0076:
                                           ; SOURCE LINE # 491
                                           ; SOURCE LINE # 492
0029 900000      E     MOV     DPTR,#GPIFABORT
002C 74FF              MOV     A,#0FFH
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 493
002F 900000      E     MOV     DPTR,#EP0BUF
0032 74B5              MOV     A,#0B5H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 494
0035 8045              SJMP    ?C0073
                                           ; SOURCE LINE # 495
                                           ; SOURCE LINE # 496
0037         ?C0077:
                                           ; SOURCE LINE # 497
                                           ; SOURCE LINE # 498
0037 120000      R     LCALL   TD_Init
                                           ; SOURCE LINE # 499
003A 900000      E     MOV     DPTR,#EP0BUF
003D 74B7              MOV     A,#0B7H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 500
0040 803A              SJMP    ?C0073
                                           ; SOURCE LINE # 501
                                           ; SOURCE LINE # 502
0042         ?C0078:
                                           ; SOURCE LINE # 503
                                           ; SOURCE LINE # 504
0042 E4                CLR     A
0043 900000      E     MOV     DPTR,#EP0BCH
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 505
0047 900000      E     MOV     DPTR,#EP0BCL
004A 04                INC     A
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 506
004C 900000      E     MOV     DPTR,#EP0CS
004F E0                MOVX    A,@DPTR
0050 4480              ORL     A,#080H
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 507
0053 00                NOP     
0054 00                NOP     
0055 00                NOP     
                                           ; SOURCE LINE # 508
0056 00                NOP     
0057 00                NOP     
0058 00                NOP     
                                           ; SOURCE LINE # 510
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 33  

0059 C2AF              CLR     EA
                                           ; SOURCE LINE # 513
005B 120000            LCALL   00H
                                           ; SOURCE LINE # 515
005E 900000      E     MOV     DPTR,#EP0BUF
0061 74B8              MOV     A,#0B8H
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 516
0064 8016              SJMP    ?C0073
                                           ; SOURCE LINE # 517
                                           ; SOURCE LINE # 518
0066         ?C0079:
                                           ; SOURCE LINE # 519
                                           ; SOURCE LINE # 521
0066 00                NOP     
0067 00                NOP     
0068 00                NOP     
                                           ; SOURCE LINE # 522
0069 900000      E     MOV     DPTR,#INPKTEND
006C 7406              MOV     A,#06H
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 523
006F 00                NOP     
0070 00                NOP     
0071 00                NOP     
                                           ; SOURCE LINE # 525
0072 900000      E     MOV     DPTR,#EP0BUF
0075 74B9              MOV     A,#0B9H
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 526
0078 8002              SJMP    ?C0073
                                           ; SOURCE LINE # 527
                                           ; SOURCE LINE # 528
007A         ?C0080:
                                           ; SOURCE LINE # 529
                                           ; SOURCE LINE # 531
007A C3                CLR     C
007B 22                RET     
                                           ; SOURCE LINE # 532
                                           ; SOURCE LINE # 533
007C         ?C0073:
                                           ; SOURCE LINE # 535
007C E4                CLR     A
007D 900000      E     MOV     DPTR,#EP0BCH
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 536
0081 900000      E     MOV     DPTR,#EP0BCL
0084 04                INC     A
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 537
0086 900000      E     MOV     DPTR,#EP0CS
0089 E0                MOVX    A,@DPTR
008A 4480              ORL     A,#080H
008C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 539
008D C3                CLR     C
                                           ; SOURCE LINE # 540
008E         ?C0081:
008E 22                RET     
             ; FUNCTION DR_VendorCmnd (END)

             ; FUNCTION ISR_Sudav (BEGIN)
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 34  

0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
                                           ; SOURCE LINE # 548
                                           ; SOURCE LINE # 550
0006 D200        E     SETB    GotSUD
                                           ; SOURCE LINE # 551
0008 5391EF            ANL     EXIF,#0EFH
                                           ; SOURCE LINE # 552
000B 900000      E     MOV     DPTR,#USBIRQ
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 553
0011 D082              POP     DPL
0013 D083              POP     DPH
0015 D0E0              POP     ACC
0017 32                RETI    
             ; FUNCTION ISR_Sudav (END)

             ; FUNCTION ISR_Sutok (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
                                           ; SOURCE LINE # 556
                                           ; SOURCE LINE # 558
0006 5391EF            ANL     EXIF,#0EFH
                                           ; SOURCE LINE # 559
0009 900000      E     MOV     DPTR,#USBIRQ
000C 7404              MOV     A,#04H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 560
000F D082              POP     DPL
0011 D083              POP     DPH
0013 D0E0              POP     ACC
0015 32                RETI    
             ; FUNCTION ISR_Sutok (END)

             ; FUNCTION ISR_Sof (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
                                           ; SOURCE LINE # 562
                                           ; SOURCE LINE # 564
0006 5391EF            ANL     EXIF,#0EFH
                                           ; SOURCE LINE # 565
0009 900000      E     MOV     DPTR,#USBIRQ
000C 7402              MOV     A,#02H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 566
000F D082              POP     DPL
0011 D083              POP     DPH
0013 D0E0              POP     ACC
0015 32                RETI    
             ; FUNCTION ISR_Sof (END)

             ; FUNCTION ISR_Ures (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
                                           ; SOURCE LINE # 568
                                           ; SOURCE LINE # 570
0006 900000      E     MOV     DPTR,#USBCS
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 35  

0009 E0                MOVX    A,@DPTR
000A 30E70E            JNB     ACC.7,?C0085
                                           ; SOURCE LINE # 571
                                           ; SOURCE LINE # 572
000D 850000      E     MOV     pConfigDscr,pHighSpeedConfigDscr
0010 850000      E     MOV     pConfigDscr+01H,pHighSpeedConfigDscr+01H
                                           ; SOURCE LINE # 573
0013 850000      E     MOV     pOtherConfigDscr,pFullSpeedConfigDscr
0016 850000      E     MOV     pOtherConfigDscr+01H,pFullSpeedConfigDscr+01H
                                           ; SOURCE LINE # 574
0019 800C              SJMP    ?C0086
001B         ?C0085:
                                           ; SOURCE LINE # 576
                                           ; SOURCE LINE # 577
001B 850000      E     MOV     pConfigDscr,pFullSpeedConfigDscr
001E 850000      E     MOV     pConfigDscr+01H,pFullSpeedConfigDscr+01H
                                           ; SOURCE LINE # 578
0021 850000      E     MOV     pOtherConfigDscr,pHighSpeedConfigDscr
0024 850000      E     MOV     pOtherConfigDscr+01H,pHighSpeedConfigDscr+01H
                                           ; SOURCE LINE # 579
0027         ?C0086:
                                           ; SOURCE LINE # 581
0027 5391EF            ANL     EXIF,#0EFH
                                           ; SOURCE LINE # 582
002A 900000      E     MOV     DPTR,#USBIRQ
002D 7410              MOV     A,#010H
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 583
0030 D082              POP     DPL
0032 D083              POP     DPH
0034 D0E0              POP     ACC
0036 32                RETI    
             ; FUNCTION ISR_Ures (END)

             ; FUNCTION ISR_Susp (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
                                           ; SOURCE LINE # 585
                                           ; SOURCE LINE # 587
0006 D200        E     SETB    Sleep
                                           ; SOURCE LINE # 588
0008 5391EF            ANL     EXIF,#0EFH
                                           ; SOURCE LINE # 589
000B 900000      E     MOV     DPTR,#USBIRQ
000E 7408              MOV     A,#08H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 590
0011 D082              POP     DPL
0013 D083              POP     DPH
0015 D0E0              POP     ACC
0017 32                RETI    
             ; FUNCTION ISR_Susp (END)

             ; FUNCTION ISR_Highspeed (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
                                           ; SOURCE LINE # 592
                                           ; SOURCE LINE # 594
0006 900000      E     MOV     DPTR,#USBCS
0009 E0                MOVX    A,@DPTR
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 36  

000A 30E70E            JNB     ACC.7,?C0089
                                           ; SOURCE LINE # 595
                                           ; SOURCE LINE # 596
000D 850000      E     MOV     pConfigDscr,pHighSpeedConfigDscr
0010 850000      E     MOV     pConfigDscr+01H,pHighSpeedConfigDscr+01H
                                           ; SOURCE LINE # 597
0013 850000      E     MOV     pOtherConfigDscr,pFullSpeedConfigDscr
0016 850000      E     MOV     pOtherConfigDscr+01H,pFullSpeedConfigDscr+01H
                                           ; SOURCE LINE # 598
0019 800C              SJMP    ?C0090
001B         ?C0089:
                                           ; SOURCE LINE # 600
                                           ; SOURCE LINE # 601
001B 850000      E     MOV     pConfigDscr,pFullSpeedConfigDscr
001E 850000      E     MOV     pConfigDscr+01H,pFullSpeedConfigDscr+01H
                                           ; SOURCE LINE # 602
0021 850000      E     MOV     pOtherConfigDscr,pHighSpeedConfigDscr
0024 850000      E     MOV     pOtherConfigDscr+01H,pHighSpeedConfigDscr+01H
                                           ; SOURCE LINE # 603
0027         ?C0090:
                                           ; SOURCE LINE # 605
0027 5391EF            ANL     EXIF,#0EFH
                                           ; SOURCE LINE # 606
002A 900000      E     MOV     DPTR,#USBIRQ
002D 7420              MOV     A,#020H
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 607
0030 D082              POP     DPL
0032 D083              POP     DPH
0034 D0E0              POP     ACC
0036 32                RETI    
             ; FUNCTION ISR_Highspeed (END)

             ; FUNCTION ISR_Ep0ack (BEGIN)
                                           ; SOURCE LINE # 608
                                           ; SOURCE LINE # 610
0000 32                RETI    
             ; FUNCTION ISR_Ep0ack (END)

             ; FUNCTION ISR_Stub (BEGIN)
                                           ; SOURCE LINE # 611
                                           ; SOURCE LINE # 613
0000 32                RETI    
             ; FUNCTION ISR_Stub (END)

             ; FUNCTION ISR_Ep0in (BEGIN)
                                           ; SOURCE LINE # 614
                                           ; SOURCE LINE # 616
0000 32                RETI    
             ; FUNCTION ISR_Ep0in (END)

             ; FUNCTION ISR_Ep0out (BEGIN)
                                           ; SOURCE LINE # 617
                                           ; SOURCE LINE # 619
0000 32                RETI    
             ; FUNCTION ISR_Ep0out (END)

             ; FUNCTION ISR_Ep1in (BEGIN)
                                           ; SOURCE LINE # 620
                                           ; SOURCE LINE # 622
0000 32                RETI    
             ; FUNCTION ISR_Ep1in (END)
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 37  


             ; FUNCTION ISR_Ep1out (BEGIN)
                                           ; SOURCE LINE # 623
                                           ; SOURCE LINE # 625
0000 32                RETI    
             ; FUNCTION ISR_Ep1out (END)

             ; FUNCTION ISR_Ep2inout (BEGIN)
                                           ; SOURCE LINE # 626
                                           ; SOURCE LINE # 628
0000 32                RETI    
             ; FUNCTION ISR_Ep2inout (END)

             ; FUNCTION ISR_Ep4inout (BEGIN)
                                           ; SOURCE LINE # 629
                                           ; SOURCE LINE # 631
0000 32                RETI    
             ; FUNCTION ISR_Ep4inout (END)

             ; FUNCTION ISR_Ep6inout (BEGIN)
                                           ; SOURCE LINE # 632
                                           ; SOURCE LINE # 634
0000 32                RETI    
             ; FUNCTION ISR_Ep6inout (END)

             ; FUNCTION ISR_Ep8inout (BEGIN)
                                           ; SOURCE LINE # 635
                                           ; SOURCE LINE # 637
0000 32                RETI    
             ; FUNCTION ISR_Ep8inout (END)

             ; FUNCTION ISR_Ibn (BEGIN)
                                           ; SOURCE LINE # 638
                                           ; SOURCE LINE # 640
0000 32                RETI    
             ; FUNCTION ISR_Ibn (END)

             ; FUNCTION ISR_Ep0pingnak (BEGIN)
                                           ; SOURCE LINE # 641
                                           ; SOURCE LINE # 643
0000 32                RETI    
             ; FUNCTION ISR_Ep0pingnak (END)

             ; FUNCTION ISR_Ep1pingnak (BEGIN)
                                           ; SOURCE LINE # 644
                                           ; SOURCE LINE # 646
0000 32                RETI    
             ; FUNCTION ISR_Ep1pingnak (END)

             ; FUNCTION ISR_Ep2pingnak (BEGIN)
                                           ; SOURCE LINE # 647
                                           ; SOURCE LINE # 649
0000 32                RETI    
             ; FUNCTION ISR_Ep2pingnak (END)

             ; FUNCTION ISR_Ep4pingnak (BEGIN)
                                           ; SOURCE LINE # 650
                                           ; SOURCE LINE # 652
0000 32                RETI    
             ; FUNCTION ISR_Ep4pingnak (END)

             ; FUNCTION ISR_Ep6pingnak (BEGIN)
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 38  

                                           ; SOURCE LINE # 653
                                           ; SOURCE LINE # 655
0000 32                RETI    
             ; FUNCTION ISR_Ep6pingnak (END)

             ; FUNCTION ISR_Ep8pingnak (BEGIN)
                                           ; SOURCE LINE # 656
                                           ; SOURCE LINE # 658
0000 32                RETI    
             ; FUNCTION ISR_Ep8pingnak (END)

             ; FUNCTION ISR_Errorlimit (BEGIN)
                                           ; SOURCE LINE # 659
                                           ; SOURCE LINE # 661
0000 32                RETI    
             ; FUNCTION ISR_Errorlimit (END)

             ; FUNCTION ISR_Ep2piderror (BEGIN)
                                           ; SOURCE LINE # 662
                                           ; SOURCE LINE # 664
0000 32                RETI    
             ; FUNCTION ISR_Ep2piderror (END)

             ; FUNCTION ISR_Ep4piderror (BEGIN)
                                           ; SOURCE LINE # 665
                                           ; SOURCE LINE # 667
0000 32                RETI    
             ; FUNCTION ISR_Ep4piderror (END)

             ; FUNCTION ISR_Ep6piderror (BEGIN)
                                           ; SOURCE LINE # 668
                                           ; SOURCE LINE # 670
0000 32                RETI    
             ; FUNCTION ISR_Ep6piderror (END)

             ; FUNCTION ISR_Ep8piderror (BEGIN)
                                           ; SOURCE LINE # 671
                                           ; SOURCE LINE # 673
0000 32                RETI    
             ; FUNCTION ISR_Ep8piderror (END)

             ; FUNCTION ISR_Ep2pflag (BEGIN)
                                           ; SOURCE LINE # 674
                                           ; SOURCE LINE # 676
0000 32                RETI    
             ; FUNCTION ISR_Ep2pflag (END)

             ; FUNCTION ISR_Ep4pflag (BEGIN)
                                           ; SOURCE LINE # 677
                                           ; SOURCE LINE # 679
0000 32                RETI    
             ; FUNCTION ISR_Ep4pflag (END)

             ; FUNCTION ISR_Ep6pflag (BEGIN)
                                           ; SOURCE LINE # 680
                                           ; SOURCE LINE # 682
0000 32                RETI    
             ; FUNCTION ISR_Ep6pflag (END)

             ; FUNCTION ISR_Ep8pflag (BEGIN)
                                           ; SOURCE LINE # 683
                                           ; SOURCE LINE # 685
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 39  

0000 32                RETI    
             ; FUNCTION ISR_Ep8pflag (END)

             ; FUNCTION ISR_Ep2eflag (BEGIN)
                                           ; SOURCE LINE # 686
                                           ; SOURCE LINE # 688
0000 32                RETI    
             ; FUNCTION ISR_Ep2eflag (END)

             ; FUNCTION ISR_Ep4eflag (BEGIN)
                                           ; SOURCE LINE # 689
                                           ; SOURCE LINE # 691
0000 32                RETI    
             ; FUNCTION ISR_Ep4eflag (END)

             ; FUNCTION ISR_Ep6eflag (BEGIN)
                                           ; SOURCE LINE # 692
                                           ; SOURCE LINE # 694
0000 32                RETI    
             ; FUNCTION ISR_Ep6eflag (END)

             ; FUNCTION ISR_Ep8eflag (BEGIN)
                                           ; SOURCE LINE # 695
                                           ; SOURCE LINE # 697
0000 32                RETI    
             ; FUNCTION ISR_Ep8eflag (END)

             ; FUNCTION ISR_Ep2fflag (BEGIN)
                                           ; SOURCE LINE # 698
                                           ; SOURCE LINE # 700
0000 32                RETI    
             ; FUNCTION ISR_Ep2fflag (END)

             ; FUNCTION ISR_Ep4fflag (BEGIN)
                                           ; SOURCE LINE # 701
                                           ; SOURCE LINE # 703
0000 32                RETI    
             ; FUNCTION ISR_Ep4fflag (END)

             ; FUNCTION ISR_Ep6fflag (BEGIN)
                                           ; SOURCE LINE # 704
                                           ; SOURCE LINE # 706
0000 32                RETI    
             ; FUNCTION ISR_Ep6fflag (END)

             ; FUNCTION ISR_Ep8fflag (BEGIN)
                                           ; SOURCE LINE # 707
                                           ; SOURCE LINE # 709
0000 32                RETI    
             ; FUNCTION ISR_Ep8fflag (END)

             ; FUNCTION ISR_GpifComplete (BEGIN)
                                           ; SOURCE LINE # 710
                                           ; SOURCE LINE # 712
0000 32                RETI    
             ; FUNCTION ISR_GpifComplete (END)

             ; FUNCTION ISR_GpifWaveform (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
                                           ; SOURCE LINE # 713
C51 COMPILER V8.01   ASVM12120                                                             03/21/2009 16:03:30 PAGE 40  

                                           ; SOURCE LINE # 716
0006 900000      E     MOV     DPTR,#GPIFABORT
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 718
000C 00                NOP     
000D 00                NOP     
000E 00                NOP     
                                           ; SOURCE LINE # 719
000F 5391BF            ANL     EXIF,#0BFH
                                           ; SOURCE LINE # 720
0012 F5A2              MOV     INT4CLR,A
                                           ; SOURCE LINE # 721
0014 00                NOP     
0015 00                NOP     
0016 00                NOP     
                                           ; SOURCE LINE # 722
0017 D082              POP     DPL
0019 D083              POP     DPH
001B D0E0              POP     ACC
001D 32                RETI    
             ; FUNCTION ISR_GpifWaveform (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1674    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
