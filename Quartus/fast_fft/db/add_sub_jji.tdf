--lpm_add_sub CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 DEVICE_FAMILY="Cyclone III" LPM_DIRECTION="SUB" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=15 aclr clken clock cout dataa datab result
--VERSION_BEGIN 9.0 cbx_cycloneii 2008:05:19:10:57:37:SJ cbx_lpm_add_sub 2008:12:09:22:11:50:SJ cbx_mgl 2009:01:29:16:12:07:SJ cbx_stratix 2008:09:18:16:08:35:SJ cbx_stratixii 2008:11:14:16:08:42:SJ  VERSION_END


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = lut 16 
SUBDESIGN add_sub_jji
( 
	aclr	:	input;
	clken	:	input;
	clock	:	input;
	cout	:	output;
	dataa[14..0]	:	input;
	datab[14..0]	:	input;
	result[14..0]	:	output;
) 
VARIABLE
	pipeline_dffe[15..0]	:	DFFE
		WITH (
			power_up ="low"
		);
	result_int[15..0]	:	WIRE;
BEGIN 
	result_int[] = (0, dataa[]) - (0, datab[]);
	pipeline_dffe[].clk = clock;
	pipeline_dffe[].clrn = !aclr;
	pipeline_dffe[].ena = clken;
	result[] = pipeline_dffe[14..0].q;
	cout = pipeline_dffe[15..15].q;
	pipeline_dffe[15..0].d = (( !result_int[15]) , result_int[14..0]);
END;
--VALID FILE
